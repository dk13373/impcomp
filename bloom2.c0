#use <string>
#use <conio>

int hash1(string s) { //hash_mul31
  int len = string_length(s);
  int[] char_str = alloc_array(int, len);
  for (int i = 0; i < len; i++) {
    char val = string_charat(s, i);
    int ord = char_ord(val);
    char_str[i] = ord;
  }
  int sum = char_str[0];
  for (int j = 1; j < len; j++) {
    sum = sum*31 + char_str[j];
  }
  return sum;
}

int hash2(string s) { //hash_lcg
  int len = string_length(s);
  int[] char_str = alloc_array(int, len);
  for (int i = 0; i < len; i++) {
    char val = string_charat(s, i);
    int ord = char_ord(val);
    char_str[i] = ord;
  }
  int sum = char_str[0];
  for (int j = 1; j < len; j++) {
    sum = 1664525*sum + 1013904223 + char_str[j];
  }
  return sum;
}

int hash3(string s) {
  int len = string_length(s);
  int[] char_str = alloc_array(int, len);
  for (int i = 0; i < len; i++) {
    char val = string_charat(s, i);
    int ord = char_ord(val);
    char_str[i] = ord;
  }
  int sum = char_str[0];
  for (int j = 1; j < len; j++) {
    sum = (12345*sum)/64 + 25555 + char_str[j]*2+1;
  }
  return sum*43 + 2532111;
}

bool get_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
{
  int index = i/32;
  int pos = i%32;
  //@assert pos >= 0 && pos < 32;
  if (((A[index] >> (31-pos)) & 0x00000001) == 1) return true;
  return false;
}

void set_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
//@ensures get_bit(A, i);
{
  int index = i/32;
  int pos = i%32;
  //@assert pos >= 0 && pos < 32;
  A[index] = A[index] | (0x00000001 << (31-pos));
}

typedef struct bloom_filter bloom;

struct bloom_filter {
  int[] data;
  int limit;  // limit == \length(data)
};

bool data_len(bloom* B) {
  //@assert \length(B->data) == B->limit;
  return true;
}

bool is_bloom(bloom* B) {
  return B != NULL && B->limit > 0 && data_len(B);
}

int ceiling(int n)
//@requires n > 0;
{ return (n + 31) / 32; }

bloom* bloom_new(int capacity)
//@requires capacity > 0;
//@ensures is_bloom(\result);
{
  bloom* B = alloc(bloom);
  B->data = alloc_array(int, ceiling(capacity));
  B->limit = ceiling(capacity);
  return B;
}

bool bloom_contains(bloom* B, string x)
//@requires B != NULL;
//@requires is_bloom(B);
{
  int hash_1 = hash1(x) % B->limit*32;
  if (hash_1 < 0) hash_1 = -hash_1;
  int hash_2 = hash2(x) % B->limit*32;
  if (hash_2 < 0) hash_2 = -hash_2;
  int hash_3 = hash3(x) % B->limit*32;
  if (hash_3 < 0) hash_3 = -hash_3;
  //@assert hash_1 >= 0 && hash_1 < B->limit*32;
  //@assert hash_2 >= 0 && hash_2 < B->limit*32;
  //@assert hash_3 >= 0 && hash_3 < B->limit*32;
  //@assert \length(B->data) == B->limit;
  if (get_bit(B->data, hash_1) == true && get_bit(B->data, hash_2) == true
      && get_bit(B->data, hash_3) == true) return true;
  return false;
}

void bloom_add(bloom* B, string x)
//@requires B != NULL;
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  int hash_1 = hash1(x) % B->limit*32;
  if (hash_1 < 0) hash_1 = -hash_1;
  int hash_2 = hash2(x) % B->limit*32;
  if (hash_2 < 0) hash_2 = -hash_2;
  int hash_3 = hash3(x) % B->limit*32;
  if (hash_3 < 0) hash_3 = -hash_3;
  //@assert hash_1 >= 0 && hash_1 < B->limit*32;
  //@assert hash_2 >= 0 && hash_2 < B->limit*32;
  //@assert hash_3 >= 0 && hash_3 < B->limit*32;
  //@assert \length(B->data) == B->limit;
  set_bit(B->data, hash_1);
  set_bit(B->data, hash_2);
  set_bit(B->data, hash_3);
}

typedef bloom* bloom_t;
