int count_vocab(string[] vocab, int[] freq, int v, string corpus, bool fast)
//@requires v == \length(vocab) && v == \length(freq);
//@requires is_sorted(vocab, 0, v);
//@ensures \result >= 0;
//@ensures v == \length(vocab) && v == \length(freq);
{
  int occur = 0;
  bundle_t read_c = read_words(corpus);
  int length_c = string_bundle_length(read_c);
  string[] array_c = string_bundle_array(read_c);

  for (int i = 0; i < length_c; i++) //looks through corpus
  //@loop_invariant i >=0 && i <= length_c;
  {
    if (fast == false) //linear search
    {
      if (linsearch(array_c[i], vocab, v) == -1) { //not in corpus
        occur++;
      } else { //in corpus
        freq[linsearch(array_c[i], vocab, v)]++; }
    } else if (fast == true) //binary search
    {
      if (binsearch(array_c[i], vocab, v) == -1) { //not in corpus
        occur++;
      } else { //in corpus
        freq[binsearch(array_c[i], vocab, v)]++; }
    }
  }
  return occur;
}

//mergesort algorithm adapted from lecture code
void merge(int[] freq, string[] vocab, int lo, int mid, int hi)
//@requires 0 <= lo && lo <= mid && mid <= hi;
//@requires \length(freq) == \length(vocab);
//@requires is_sorted_int(freq, lo, mid) && is_sorted_int(freq, mid, hi);
//@ensures is_sorted_int(freq, lo, hi);
{
  int[] temp = alloc_array(int, hi - lo);
  string[] temp_v = alloc_array(string, hi - lo);
  int i = lo;
  int j = mid;
  int k = 0;

  while (i < mid && j < hi)
  //@loop_invariant lo <= i && i <= mid;
  //@loop_invariant mid <= j && j <= hi;
  //@loop_invariant k == (i - lo) + (j - mid);
  {
    if (freq[i] <= freq[j]) {
      temp[k] = freq[i];
      temp_v[k] = vocab[i];
      i++;
    } else {  //@assert freq[i] > freq[j];
      temp[k] = freq[j];
      temp_v[k] = vocab[j];
      j++;
    }
    k++;
  }
  //@assert i == mid || j == hi;
  while (i < mid)
  //@loop_invariant lo <= i && j <= hi;
  //@loop_invariant 0 <= k && k <= hi - lo;
  { temp[k] = freq[i]; temp_v[k] = vocab[i]; i++; k++; }
  while (j < hi)
  //@loop_invariant lo <= j && j <= hi;
  //@loop_invariant 0 <= k && k <= hi - lo;
  { temp[k] = freq[j]; temp_v[k] = vocab[i]; j++; k++; }
  for (k = 0; k < hi-lo; k++)
  {
    freq[lo+k] = temp[k];
    vocab[lo+k] = temp_v[k]; }
}


void mergesort(int[] freq, string[] vocab, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(freq);
//@requires \length(freq) == \length(vocab);
//@ensures is_sorted_int(freq, lo, hi);
{
  if (hi - lo <= 1) return;

  int mid = lo + (hi - lo)/2;         //@assert lo < mid && mid < hi;
  mergesort(freq, vocab, lo, mid);    //@assert is_sorted_int(freq, lo, mid);
  mergesort(freq, vocab, mid, hi);    //@assert is_sorted_int(freq, mid, hi);
  merge(freq, vocab, lo, mid, hi);    //@assert is_sorted_int(freq, lo, hi);
}

void sort_by_freq(string[] vocab, int[] freq, int v)
//@requires v == \length(vocab) && v == \length(freq);
//@ensures is_sorted_int(freq, 0, v);
{
  mergesort(freq, vocab, 0, v);
}
