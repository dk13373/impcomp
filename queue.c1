/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */

/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* queue_t;
typedef struct queue_header* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

typedef bool check_property_fn(void* x);

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

typedef void* iterate_fn(void* accum, void* x);

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;

/**********************/
/*** Implementation ***/
/**********************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};

bool is_inclusive_segment(list* start, list* end, int i) {
  if (i < 0) return false;
  if (start == NULL && i == 0) return true;
  else if (start == end && start->next == NULL && i == 1) return true;
  else if (start != end && i > 0 && start->next != NULL &&
           is_inclusive_segment(start->next,end, i-1)) return true;
  return false;
}

bool is_queue(queue* Q) {
  if (Q == NULL) return false;
  if (is_inclusive_segment(Q->front, Q->back, Q->size)) return true;
  return false;
}

queue* queue_new()
//@ensures \result != NULL;
{
  queue* Q = alloc(queue);
  list* l = alloc(list);
  Q->front = NULL;
  Q->back = l;
  Q->size = 0;
  return Q;
}

int queue_size(queue* Q)
//@requires Q != NULL;
//@ensures \result >= 0;
{
  return Q->size;
}

void enq(queue* Q, void* x)
//@requires Q != NULL;
{
  list* l = alloc(list);
  if (Q->front == NULL && Q->size == 0) { //empty queue
    Q->front = l;
    Q->back = l;
    Q->front->next = NULL;
    Q->front->data = x;
    Q->size = 1;
  }
  else {
    Q->back->next = l;
    Q->back = l;
    Q->back->next = NULL;
    Q->back->data = x;
    Q->size = Q->size + 1;
  }
}

void* deq(queue* Q)
//@requires Q != NULL && queue_size(Q) > 0;
{
  if (Q->front == Q->back && Q->size == 1) {
    void* x = Q->front->data;
    Q->front == NULL;
    Q->size = 0;
  }
  void* x = Q->front->data;
  Q->front = Q->front->next;
  Q->size = Q->size - 1;
  return x;
}

void* queue_peek(queue* Q, int i)
//@requires Q != NULL && 0 <= i && i < queue_size(Q);
{
  list* l = Q->front;
  for (int index = 0; index <= i; index++) {
    if (index == i) {
      void* x = l->data;
      return x;
    }
    l = l->next;
  }
  return NULL;
}

void queue_reverse(queue* Q)
//@requires Q != NULL;
{
  if (Q->front == NULL && Q->size == 0) return;
  list* cur = Q->front;
  list* nxt = NULL;
  list* prev = NULL;
  while (cur != NULL) {
    nxt = cur->next;
    cur->next = prev;
    prev = cur;
    cur = nxt;
  }
  Q->back = Q->front;
  Q->front = prev;
}

bool queue_all(queue* Q, check_property_fn* P)
//@requires Q != NULL && P != NULL;
{
  if (Q->front == NULL && Q->size == 0) return true;
  list* l = Q->front;
  for (int index = 0; index < queue_size(Q); index++) {
    if ((*P)(l->data) == false) return false;
    l = l->next;
  }
  return true;
}

void* queue_iterate(queue* Q, void* base, iterate_fn* F)
//@requires Q != NULL && F != NULL;
{
  if (Q->front == NULL && Q->size == 0) return base;
  list* l = Q->front;
  for (int index = 0; index < queue_size(Q); index++) {
    base = (*F)(base, l->data);
    l = l->next;
  }
  return base;
}
